// 現状:
// スレッドプール準備良し

extern crate l_ray;
extern crate rand;
extern crate threadpool;

use std::f64::consts::*;
use std::fs::File;
use std::io::*;
// PIに使った
use std::sync::atomic::{AtomicUsize, Ordering};
use std::sync::mpsc::channel;
use std::sync::{Arc, Barrier};
use threadpool::ThreadPool;

use l_ray::source::{random::*, vector::*, *};

// 画像の情報
const WIDTH: usize = 1200;
const HEIGHT: usize = 800;
const MAX: usize = 255;

const WORKS: usize = 8;
// poolの数

fn main() {
	let up: V = V::new_tri(0.0, 1.0, 0.0);
	// "上"の方向
	let fov: f64 = 30.0 * PI / 180.0;
	// 視野角 ラジアンに直した
	let aspect: f64 = WIDTH as f64 / HEIGHT as f64;
	// アスペクト比（4:3みたいなやつ）

	// 球体のみ用
	// let eye: V = V::new_sig(5.0);
	// // 目の位置
	// let center: V = V::new_sig(0.0);
	// // 注視点

	// in room用
	let eye = V::new_tri(50.0, 52.0, 295.6);
	let center = eye + V {
		x: 0.0,
		y: -0.042612,
		z: -1.0,
	};

	// 視線の基底（全部垂直な単位ベクトル）
	let WE: V = V::norm(eye - center);
	// 視線の単位ベクトルj
	let UE: V = V::norm(V::cross(up, WE));
	// 視線と"上"の方向に垂直な単位ベクトル
	let VE: V = V::cross(WE, UE);
	// WEとUEに垂直な単位ベクトル（双方正規化されてるため正規化の必要なし）

	// Thread Pool
	let pool = ThreadPool::new(WORKS);
	let (sen, rec) = channel();

	// scene 初期化
	//let scene = obj::Scene::new_mul();
	let scene = obj::Scene::in_room();

	let mut iter: [u32; 3] = [0, 0, 0];

	for i in 0..HEIGHT * WIDTH {
		let scene = scene.clone();
		let mut iter = iter.clone();
		let sen = sen.clone();

		pool.execute(move || {
			let x = (i % WIDTH) as f64;
			let y = (i / WIDTH) as f64;

			let mut ray = obj::Ray::new();

			ray.o = eye;
			// 目の位置
			{
				let tf = (fov * 0.5).tan();
				let rpx = 2.0 * x / WIDTH as f64 - 1.0;
				let rpy = 2.0 * y / HEIGHT as f64 - 1.0;
				let w: V = V::norm(V {
					x: aspect * tf * rpx,
					y: tf * rpy,
					z: -1.0,
				});
				ray.d = UE * V::new_sig(w.x) + VE * V::new_sig(w.y) + WE * V::new_sig(w.z);
			}
			// 目線の長さ（まだよくわかってない）

			let h: Option<obj::Hit> = scene.intersect(&ray, 0.0, 1e+10);

			let tonemap = |v: f64| {
				use std::cmp::*;
				min(max((v.powf(1.0 / 2.2) * 255.0) as u32, 0), 255)
				// ちゃんとガンマ補正したよ
			};

			if let Some(s) = h {
				// 反射率
				let c: vector::V = s.sphere.refl * V::new_sig(V::dot(s.n, -ray.d));
				// V::new_sig(V::dot(s.n, -ray.d))を
				// 入れるとランバート反射になる。

				iter = [tonemap(c.x.abs()), tonemap(c.y.abs()), tonemap(c.z.abs())];

			// // 球面上の接点の法線
			// let n: vector::V = s.n;
			// file.write_all(
			//     format!(
			//         "{} {} {}\n",
			//         tonemap(n.x.abs()),
			//         tonemap(n.y.abs()),
			//         tonemap(n.z.abs())
			//     ).as_bytes(),
			// );
			} else {
				iter = [0, 0, 0];
			}

			sen.send(iter).expect("failed send iter");
		});
	}

	let mut rec = rec.iter().take(WIDTH * HEIGHT).collect::<Vec<[u32; 3]>>();

	// ppmファイル生成
	let mut file = File::create("ideal.ppm").unwrap();
	file.write_all(format!("P3\n{} {}\n{}\n", WIDTH, HEIGHT, 255).as_bytes())
		.unwrap();

	for i in 0..WIDTH * HEIGHT {
		let n = rec.pop().unwrap();
		file.write_all(format!("{} {} {}\n", n[0], n[1], n[2]).as_bytes())
			.unwrap();
	}
}
